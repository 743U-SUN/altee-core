generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String      @id @default(cuid())
  email                  String      @unique
  name                   String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  customImageKey         String?
  emailVerified          DateTime?
  image                  String?
  isActive               Boolean     @default(true)
  preferredImageProvider String?
  role                   UserRole    @default(USER)
  accounts               Account[]
  sessions               Session[]
  articles               Article[]   // 記事の著者
  mediaFiles             MediaFile[] // アップロードしたメディアファイル

  // Performance optimization indexes
  @@index([createdAt])
  @@index([isActive])
  @@index([role])
  @@index([email, name])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model BlacklistedEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  reason    String?
  createdAt DateTime @default(now())

  @@map("blacklisted_emails")
}

model Article {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     // Markdown
  excerpt     String?    // 要約
  thumbnailId String?    // MediaFileのID
  thumbnail   MediaFile? @relation(fields: [thumbnailId], references: [id])
  published   Boolean    @default(false)
  publishedAt DateTime?
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Performance optimization indexes
  @@index([published])
  @@index([publishedAt])
  @@index([createdAt])
  @@index([slug])
  @@map("articles")
}

model MediaFile {
  id                  String     @id @default(cuid())
  storageKey          String     @unique // コンテナ名/パス形式
  containerName       String     // article-thumbnails or article-images
  originalName        String
  fileName            String
  fileSize            Int
  mimeType            String
  uploadType          MediaType  @default(THUMBNAIL)
  uploaderId          String     // 管理者ID（必須）
  uploader            User       @relation(fields: [uploaderId], references: [id])
  articles            Article[]  // サムネイル用リレーション
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  
  // 論理削除フィールド
  deletedAt           DateTime?  // 削除日時（null = 削除されていない）
  deletedBy           String?    // 削除者のユーザーID
  scheduledDeletionAt DateTime?  // 物理削除予定日時（30日後）

  // Performance optimization indexes
  @@index([containerName])
  @@index([uploadType])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("media_files")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

enum UserRole {
  USER
  ADMIN
  GUEST
}

enum MediaType {
  THUMBNAIL  // 記事サムネイル
  CONTENT    // 記事内画像
}
