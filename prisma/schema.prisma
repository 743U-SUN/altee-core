generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @unique
  name                   String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  customImageKey         String?
  emailVerified          DateTime?
  image                  String?
  isActive               Boolean      @default(true)
  preferredImageProvider String?
  role                   UserRole     @default(USER)
  accounts               Account[]
  sessions               Session[]
  articles               Article[]    // 記事の著者
  mediaFiles             MediaFile[]  // アップロードしたメディアファイル
  profile                UserProfile? // プロフィール情報
  userLinks              UserLink[]   // ユーザーのSNSリンク

  // Performance optimization indexes
  @@index([createdAt])
  @@index([isActive])
  @@index([role])
  @@index([email, name])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model BlacklistedEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  reason    String?
  createdAt DateTime @default(now())

  @@map("blacklisted_emails")
}

model Article {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     // Markdown
  excerpt     String?    // 要約
  thumbnailId String?    // MediaFileのID
  thumbnail   MediaFile? @relation(fields: [thumbnailId], references: [id])
  published   Boolean    @default(false)
  publishedAt DateTime?
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // 新しいリレーション
  categories ArticleCategory[]
  tags       ArticleTag[]

  // Performance optimization indexes
  @@index([published])
  @@index([publishedAt])
  @@index([createdAt])
  @@index([slug])
  @@map("articles")
}

model MediaFile {
  id                  String         @id @default(cuid())
  storageKey          String         @unique // コンテナ名/パス形式
  containerName       String         // article-thumbnails or article-images
  originalName        String
  fileName            String
  fileSize            Int
  mimeType            String
  uploadType          MediaType      @default(THUMBNAIL)
  uploaderId          String         // 管理者ID（必須）
  uploader            User           @relation(fields: [uploaderId], references: [id])
  articles            Article[]      // サムネイル用リレーション
  profileImages       UserProfile[]  @relation("ProfileImage")
  linkIcons           UserLink[]     @relation("LinkIcon")
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  
  // 論理削除フィールド
  deletedAt           DateTime?      // 削除日時（null = 削除されていない）
  deletedBy           String?        // 削除者のユーザーID
  scheduledDeletionAt DateTime?      // 物理削除予定日時（30日後）

  // メタデータフィールド
  description         String?        // 画像説明（オプション）
  altText            String?        // alt属性用テキスト
  tags               Json?          // タグ配列 ["hero", "mobile", "v2"]

  // Performance optimization indexes
  @@index([containerName])
  @@index([uploadType])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("media_files")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?   // UI表示用の色コード (#RRGGBB)
  order       Int       @default(0) // 表示順序
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // リレーション
  articles    ArticleCategory[]
  
  @@index([order])
  @@index([name])
  @@map("categories")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?   // UI表示用の色コード (#RRGGBB)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // リレーション
  articles    ArticleTag[]
  
  @@index([name])
  @@map("tags")
}

// 記事とカテゴリの中間テーブル（多対多）
model ArticleCategory {
  id         String   @id @default(cuid())
  articleId  String
  categoryId String
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  
  @@unique([articleId, categoryId])
  @@index([articleId])
  @@index([categoryId])
  @@map("article_categories")
}

// 記事とタグの中間テーブル（多対多）
model ArticleTag {
  id        String   @id @default(cuid())
  articleId String
  tagId     String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
  @@map("article_tags")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

enum UserRole {
  USER
  ADMIN
  GUEST
}

enum MediaType {
  THUMBNAIL  // 記事サムネイル
  CONTENT    // 記事内画像
  SYSTEM     // システム専用画像
  PROFILE    // プロフィール画像
  BACKGROUND // 背景画像
  LINK_ICON  // リンクアイコン
}

model UserProfile {
  id                 String     @id @default(cuid())
  userId             String     @unique
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName        String?
  bio                String?
  profileImageId     String?
  profileImage       MediaFile? @relation("ProfileImage", fields: [profileImageId], references: [id])
  backgroundImageKey String?    // 管理者用意の背景画像ファイル名
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@index([userId])
  @@map("user_profiles")
}

model LinkType {
  id           String @id @default(cuid())
  name         String @unique // "youtube", "instagram", "custom"
  displayName  String // "YouTube", "Instagram", "カスタムリンク"
  defaultIcon  String? // デフォルトアイコンのパス
  urlPattern   String? // バリデーション用正規表現
  isCustom     Boolean @default(false) // カスタムリンクかどうか
  isActive     Boolean @default(true) // 利用可能かどうか
  sortOrder    Int @default(0) // 管理画面での表示順序
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  userLinks    UserLink[]
  
  @@index([isActive])
  @@index([sortOrder])
  @@map("link_types")
}

model UserLink {
  id           String @id @default(cuid())
  userId       String
  linkTypeId   String
  url          String
  customLabel  String? // カスタムリンクのラベル（最大10文字）
  customIconId String? // ユーザーアップロードアイコン
  sortOrder    Int @default(0) // ユーザー内での表示順序
  isVisible    Boolean @default(true) // 表示/非表示
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkType     LinkType @relation(fields: [linkTypeId], references: [id])
  customIcon   MediaFile? @relation("LinkIcon", fields: [customIconId], references: [id])
  
  @@index([userId])
  @@index([sortOrder])
  @@map("user_links")
}
