# PWA (Progressive Web App) 導入ガイド - altee-core

## 🎯 PWA化の目的
モバイル対応が完了したaltee-coreをPWA化し、スマートフォンで **アプリライクな体験** を提供する。

### PWA化により実現される機能
- 📱 **ホーム画面へのインストール** - ネイティブアプリのような起動
- 🏠 **スタンドアロン表示** - ブラウザUI（アドレスバー・戻るボタン等）を完全非表示
- 🎨 **ネイティブ風デザイン** - スマホアプリのような見た目
- 🚀 **通常通信** - キャッシュなし、リアルタイム通信維持

## 🎯 実装方針

**Next.js 15標準機能のみを使用**:
- ✅ 軽量実装（追加依存関係なし）
- ✅ シンプルな構成
- ✅ メンテナンス性の高さ
- ❌ オフライン対応なし（意図的）
- ❌ キャッシュなし（意図的）
- ❌ プッシュ通知なし（将来実装予定）

---

## 📋 実装手順

### 1. Web App Manifestの作成

**app/manifest.ts**
```typescript
import type { MetadataRoute } from 'next'

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: 'Altee Core - モバイルアプリ',
    short_name: 'Altee',
    description: 'Next.js 15 + App Router による高性能Webアプリケーション',
    start_url: '/',
    display: 'standalone', // ブラウザUI完全非表示
    background_color: '#0f172a', // ダークモード基調
    theme_color: '#1e293b',
    orientation: 'portrait-primary',
    categories: ['productivity', 'utilities'],
    lang: 'ja',
    scope: '/',
    icons: [
      {
        src: '/pwa/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png'
      },
      {
        src: '/pwa/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png'
      }
    ]
  }
}
```

### 2. PWAアイコンの準備

**必要なアイコン**
```
public/pwa/
├── icon-192x192.png (必須)
└── icon-512x512.png (必須)
```

**アイコン準備手順**:
1. 192x192pxのPNG画像を準備
2. 512x512pxのPNG画像を準備
3. `public/pwa/` ディレクトリに配置

### 3. MetaDataの更新

**app/layout.tsx** (既存のメタデータに追加)
```typescript
import type { Metadata } from 'next'

export const metadata: Metadata = {
  // 既存のメタデータ...
  manifest: '/manifest.json', // Next.jsが自動的にmanifest.tsを変換
  appleWebApp: {
    capable: true,
    statusBarStyle: 'default',
    title: 'Altee Core',
  },
}
```

---

## 🧪 テスト・検証手順

### 1. ローカル開発での確認
```bash
# 本番ビルドでのテスト (PWA機能確認には必須)
npm run build
npm run start
```

### 2. Chrome DevToolsでの検証
1. **Application タブ** → **Manifest** でマニフェストファイルの内容確認
2. **Lighthouse** でPWAスコアの測定
3. **Console** でエラーがないことを確認

### 3. 実機での確認事項
- [x] スタンドアロンモードでの起動確認
- [x] ブラウザUI（アドレスバー・戻るボタン）の非表示確認
- [x] アイコンの適切な表示

### 4. スタンドアロンモード確認方法
- **Chrome DevTools**: Application → Manifest → Display が「standalone」
- **実機確認**: インストール後にアドレスバーが非表示になっているか目視確認

---

## ⚠️ 注意点・制約事項

### セキュリティ要件
- **HTTPS必須** - PWAはHTTPS環境でのみ動作
- **localhost例外** - 開発環境ではHTTPでも動作

### ブラウザ対応状況
- **iOS Safari** - iOS 11.3以降でPWA対応
- **Android Chrome** - 完全サポート
- **デスクトップ** - Chrome, Edge, Firefoxで対応

### 制限事項
- **オフライン非対応** - ネットワーク切断時は通常のエラー表示
- **プッシュ通知なし** - 将来のバージョンで検討
- **キャッシュなし** - 毎回サーバーから最新データを取得

---

## 📚 参考リソース

- [Next.js PWA Guide](https://nextjs.org/docs/app/building-your-application/configuring/progressive-web-apps)
- [Web App Manifest - MDN](https://developer.mozilla.org/docs/Web/Manifest)
- [PWA Install Criteria](https://web.dev/install-criteria/)

---

*🎯 対象: altee-core Next.js 15.3.3 + App Router + TypeScript構成*  
*💡 方針: Next.js標準機能のみで最小構成PWA実装*