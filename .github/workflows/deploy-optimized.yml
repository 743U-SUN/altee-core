name: Deploy to Sakura VPS (Optimized)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 40‚Üí30ÂàÜ„Å´Áü≠Á∏Æ
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          # Ensure we're in the correct directory
          cd /home/ubuntu/altee-core || { echo "Directory not found"; exit 1; }
          
          # Pull latest changes
          echo "üîÑ Pulling latest changes..."
          git pull origin main
          
          # Run database migrations first (fast)
          echo "üóÑÔ∏è Running database migrations..."
          ./scripts/migrate-production.sh
          
          # Build with cache (much faster)
          echo "üèóÔ∏è Building application..."
          docker compose -f compose.nginx.yaml build --pull
          
          # Rolling restart (minimize downtime)
          echo "üîÑ Restarting services..."
          docker compose -f compose.nginx.yaml up -d
          
          # Quick health check (reduced wait time)
          echo "‚è≥ Waiting for services to start..."
          sleep 15  # 30‚Üí15Áßí„Å´Áü≠Á∏Æ
          
          # Verify deployment
          if curl -f -s --max-time 10 https://altee.me > /dev/null; then
            echo "‚úÖ Deployment successful - https://altee.me is accessible"
            
            # Quick health check
            HEALTH_RESPONSE=$(curl -s --max-time 5 https://altee.me/api/health)
            if echo "$HEALTH_RESPONSE" | grep -q '"status":"healthy"'; then
              echo "‚úÖ Health check passed"
            else
              echo "‚ö†Ô∏è Health check failed or returned unexpected response"
            fi
          else
            echo "‚ùå Deployment failed - site not accessible"
            exit 1
          fi
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üöÄ Deployment completed successfully"
        else
          echo "üí• Deployment failed"
        fi